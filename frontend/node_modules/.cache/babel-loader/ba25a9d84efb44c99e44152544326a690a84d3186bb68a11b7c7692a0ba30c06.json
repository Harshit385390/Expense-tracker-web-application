{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nfunction RefrshHandler({\n  setIsAuthenticated\n}) {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if a token exists in localStorage\n    if (localStorage.getItem('token')) {\n      // If token exists, the user is considered authenticated\n      setIsAuthenticated(true);\n\n      // If the user is on the root, login, or signup page,\n      // and they are authenticated, redirect them to the home page.\n      if (location.pathname === '/' || location.pathname === '/login' || location.pathname === '/signup') {\n        // Use navigate with { replace: true } to prevent going back to login/signup\n        // after being redirected to home. This cleans up the history stack.\n        navigate('/home', {\n          replace: true\n        });\n      }\n    } else {\n      // If no token, ensure isAuthenticated state is false\n      setIsAuthenticated(false);\n      // Optionally, if they are trying to access a protected route\n      // without a token, you might want to redirect them to login.\n      // However, PrivateRoute in App.js already handles this.\n    }\n  }, [location.pathname, navigate, setIsAuthenticated]); // Added location.pathname to dependencies for precision\n\n  // This component renders nothing, it's purely for side effects (authentication handling)\n  return null;\n}\n_s(RefrshHandler, \"fPjCxODVr6jVvib6o2c9VLE4s84=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = RefrshHandler;\nexport default RefrshHandler;\nvar _c;\n$RefreshReg$(_c, \"RefrshHandler\");","map":{"version":3,"names":["React","useEffect","useLocation","useNavigate","RefrshHandler","setIsAuthenticated","_s","location","navigate","localStorage","getItem","pathname","replace","_c","$RefreshReg$"],"sources":["C:/Users/harsh/Desktop/expensetracker/frontend/src/RefrshHandler.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\n\r\nfunction RefrshHandler({ setIsAuthenticated }) {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Check if a token exists in localStorage\r\n        if (localStorage.getItem('token')) {\r\n            // If token exists, the user is considered authenticated\r\n            setIsAuthenticated(true);\r\n\r\n            // If the user is on the root, login, or signup page,\r\n            // and they are authenticated, redirect them to the home page.\r\n            if (\r\n                location.pathname === '/' ||\r\n                location.pathname === '/login' ||\r\n                location.pathname === '/signup'\r\n            ) {\r\n                // Use navigate with { replace: true } to prevent going back to login/signup\r\n                // after being redirected to home. This cleans up the history stack.\r\n                navigate('/home', { replace: true });\r\n            }\r\n        } else {\r\n            // If no token, ensure isAuthenticated state is false\r\n            setIsAuthenticated(false);\r\n            // Optionally, if they are trying to access a protected route\r\n            // without a token, you might want to redirect them to login.\r\n            // However, PrivateRoute in App.js already handles this.\r\n        }\r\n    }, [location.pathname, navigate, setIsAuthenticated]); // Added location.pathname to dependencies for precision\r\n\r\n    // This component renders nothing, it's purely for side effects (authentication handling)\r\n    return null;\r\n}\r\n\r\nexport default RefrshHandler;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,SAASC,aAAaA,CAAC;EAAEC;AAAmB,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAMM,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACZ;IACA,IAAIQ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;MAC/B;MACAL,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACA;MACA,IACIE,QAAQ,CAACI,QAAQ,KAAK,GAAG,IACzBJ,QAAQ,CAACI,QAAQ,KAAK,QAAQ,IAC9BJ,QAAQ,CAACI,QAAQ,KAAK,SAAS,EACjC;QACE;QACA;QACAH,QAAQ,CAAC,OAAO,EAAE;UAAEI,OAAO,EAAE;QAAK,CAAC,CAAC;MACxC;IACJ,CAAC,MAAM;MACH;MACAP,kBAAkB,CAAC,KAAK,CAAC;MACzB;MACA;MACA;IACJ;EACJ,CAAC,EAAE,CAACE,QAAQ,CAACI,QAAQ,EAAEH,QAAQ,EAAEH,kBAAkB,CAAC,CAAC,CAAC,CAAC;;EAEvD;EACA,OAAO,IAAI;AACf;AAACC,EAAA,CAhCQF,aAAa;EAAA,QACDF,WAAW,EACXC,WAAW;AAAA;AAAAU,EAAA,GAFvBT,aAAa;AAkCtB,eAAeA,aAAa;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}